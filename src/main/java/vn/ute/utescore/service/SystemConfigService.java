package vn.ute.utescore.service;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import vn.ute.utescore.model.ConfigurationHistory;
import vn.ute.utescore.model.NhanVien;
import vn.ute.utescore.model.SystemConfigurations;
import vn.ute.utescore.model.ThongBao;
import vn.ute.utescore.repository.ConfigurationHistoryRepository;
import vn.ute.utescore.repository.NhanVienRepository;
import vn.ute.utescore.repository.SystemConfigurationsRepository;
import vn.ute.utescore.repository.ThongBaoRepository;

@Service
public class SystemConfigService {
    
    @Autowired
    private SystemConfigurationsRepository systemConfigurationsRepository;
    
    @Autowired
    private ConfigurationHistoryRepository configurationHistoryRepository;
    
    @Autowired
    private NhanVienRepository nhanVienRepository;
    
    @Autowired
    private ThongBaoRepository thongBaoRepository;
    
    /**
     * L∆∞u ho·∫∑c c·∫≠p nh·∫≠t c·∫•u h√¨nh h·ªá th·ªëng
     */
    @Transactional
    public Map<String, Object> saveConfiguration(Map<String, Object> configData, String changedBy) {
        Map<String, Object> result = new HashMap<>();
        
        try {
            // C√°c config keys t·ª´ form
            String[] configKeys = {
                "deposit_rate",           // T·ª∑ l·ªá ti·ªÅn c·ªçc
                "transaction_fee",        // Ph√≠ giao d·ªãch
                "service_fee",            // Ph√≠ d·ªãch v·ª•
                "refund_time",            // Th·ªùi gian ho√†n ti·ªÅn
                "cancel_before_24h",      // H·ªßy tr∆∞·ªõc 24h
                "cancel_before_12h",      // H·ªßy tr∆∞·ªõc 12h
                "cancel_under_12h"         // H·ªßy d∆∞·ªõi 12h
            };
            
            int savedCount = 0;
            int updatedCount = 0;
            int failedCount = 0;
            
            // L∆∞u t·ª´ng config
            for (String key : configKeys) {
                if (configData.containsKey(key)) {
                    String newValue = String.valueOf(configData.get(key));
                    boolean success = updateConfig(key, newValue, changedBy);
                    
                    if (success) {
                        updatedCount++;
                    } else {
                        failedCount++;
                    }
                    savedCount++;
                }
            }
            
            result.put("success", true);
            result.put("savedCount", savedCount);
            result.put("updatedCount", updatedCount);
            result.put("failedCount", failedCount);
            result.put("message", "ƒê√£ l∆∞u " + savedCount + " c·∫•u h√¨nh th√†nh c√¥ng!");
            
            // G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ nh√¢n vi√™n
            sendNotificationToAllStaff(configData, changedBy);
            
        } catch (Exception e) {
            System.err.println("Error saving configurations: " + e.getMessage());
            e.printStackTrace();
            result.put("success", false);
            result.put("message", "L·ªói khi l∆∞u c·∫•u h√¨nh: " + e.getMessage());
        }
        
        return result;
    }
    
    /**
     * C·∫≠p nh·∫≠t m·ªôt config c·ª• th·ªÉ
     */
    private boolean updateConfig(String configKey, String newValue, String changedBy) {
        try {
            // L·∫•y config hi·ªán t·∫°i
            Optional<SystemConfigurations> existingConfig = 
                systemConfigurationsRepository.findByConfigKey(configKey);
            
            String oldValue = "N/A";
            
            if (existingConfig.isPresent()) {
                // C·∫≠p nh·∫≠t config hi·ªán t·∫°i
                oldValue = existingConfig.get().getConfigValue();
                
                // L∆∞u l·ªãch s·ª≠ thay ƒë·ªïi
                ConfigurationHistory history = new ConfigurationHistory();
                history.setConfigKey(configKey);
                history.setOldValue(oldValue);
                history.setNewValue(newValue);
                history.setChangedBy(changedBy);
                history.setChangeReason("C·∫≠p nh·∫≠t c·∫•u h√¨nh h·ªá th·ªëng");
                history.setCreatedAt(LocalDateTime.now());
                configurationHistoryRepository.save(history);
                
                // C·∫≠p nh·∫≠t config
                SystemConfigurations config = existingConfig.get();
                config.setConfigValue(newValue);
                config.setUpdatedAt(LocalDateTime.now());
                systemConfigurationsRepository.save(config);
                
            } else {
                // T·∫°o config m·ªõi
                SystemConfigurations newConfig = new SystemConfigurations();
                newConfig.setConfigKey(configKey);
                newConfig.setConfigValue(newValue);
                newConfig.setConfigType("system");
                newConfig.setIsActive(true);
                newConfig.setCreatedAt(LocalDateTime.now());
                newConfig.setUpdatedAt(LocalDateTime.now());
                systemConfigurationsRepository.save(newConfig);
                
                // L∆∞u l·ªãch s·ª≠ thay ƒë·ªïi
                ConfigurationHistory history = new ConfigurationHistory();
                history.setConfigKey(configKey);
                history.setOldValue("N/A");
                history.setNewValue(newValue);
                history.setChangedBy(changedBy);
                history.setChangeReason("T·∫°o c·∫•u h√¨nh m·ªõi");
                history.setCreatedAt(LocalDateTime.now());
                configurationHistoryRepository.save(history);
            }
            
            return true;
            
        } catch (Exception e) {
            System.err.println("Error updating config " + configKey + ": " + e.getMessage());
            return false;
        }
    }
    
    /**
     * T·∫°o th√¥ng b√°o v√†o b·∫£ng ThongBao cho nh√¢n vi√™n khi c√≥ thay ƒë·ªïi c·∫•u h√¨nh
     */
    private void sendNotificationToAllStaff(Map<String, Object> configData, String changedBy) {
        try {
            System.out.println("===== B·∫Øt ƒë·∫ßu t·∫°o th√¥ng b√°o cho nh√¢n vi√™n =====");
            
            // L·∫•y danh s√°ch nh√¢n vi√™n ƒëang ho·∫°t ƒë·ªông
            List<NhanVien> activeStaff = nhanVienRepository.findActiveEmployees();
            
            if (activeStaff == null || activeStaff.isEmpty()) {
                System.out.println("‚ö†Ô∏è Kh√¥ng c√≥ nh√¢n vi√™n n√†o ƒë·ªÉ g·ª≠i th√¥ng b√°o");
                return;
            }
            
            System.out.println("üìã T√¨m th·∫•y " + activeStaff.size() + " nh√¢n vi√™n ƒëang ho·∫°t ƒë·ªông");
            
            // T·∫°o n·ªôi dung th√¥ng b√°o
            String tieuDe = "Th√¥ng b√°o thay ƒë·ªïi c·∫•u h√¨nh h·ªá th·ªëng";
            String noiDung = createConfigChangeNotificationContent(configData, changedBy);
            
            // T·∫°o th√¥ng b√°o cho t·ª´ng nh√¢n vi√™n
            int successCount = 0;
            for (NhanVien staff : activeStaff) {
                try {
                    System.out.println("üìù ƒêang t·∫°o th√¥ng b√°o cho nh√¢n vi√™n: " + staff.getFullName());
                    
                    ThongBao thongBao = new ThongBao();
                    thongBao.setTieuDe(tieuDe);
                    thongBao.setNoiDung(noiDung);
                    thongBao.setLoaiThongBao("C·∫•u h√¨nh h·ªá th·ªëng");
                    thongBao.setNgayGui(LocalDateTime.now());
                    thongBao.setTrangThai("Ch∆∞a ƒë·ªçc");
                    // Note: ThongBao hi·ªán t·∫°i c√≥ li√™n k·∫øt v·ªõi KhachHang, kh√¥ng c√≥ v·ªõi NhanVien
                    // T·∫°m th·ªùi ƒë·ªÉ khachHang = null v√¨ kh√¥ng c√≥ relationship v·ªõi NhanVien
                    thongBao.setKhachHang(null);
                    
                    ThongBao saved = thongBaoRepository.save(thongBao);
                    successCount++;
                    
                    System.out.println("‚úÖ ƒê√£ t·∫°o th√¥ng b√°o ID: " + saved.getMaThongBao() + " cho nh√¢n vi√™n: " + staff.getFullName());
                } catch (Exception e) {
                    System.err.println("‚ùå L·ªói t·∫°o th√¥ng b√°o cho nh√¢n vi√™n " + staff.getFullName() + ": " + e.getMessage());
                    e.printStackTrace();
                }
            }
            
            System.out.println("üìß ƒê√£ t·∫°o " + successCount + "/" + activeStaff.size() + " th√¥ng b√°o");
            System.out.println("===== Ho√†n th√†nh t·∫°o th√¥ng b√°o =====");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error creating notifications: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * T·∫°o n·ªôi dung th√¥ng b√°o
     */
    private String createConfigChangeNotificationContent(Map<String, Object> configData, String changedBy) {
        StringBuilder content = new StringBuilder();
        content.append("H·ªá th·ªëng ƒë√£ c√≥ thay ƒë·ªïi v·ªÅ c·∫•u h√¨nh. Chi ti·∫øt nh∆∞ sau:\n\n");
        
        // Th√™m c√°c thay ƒë·ªïi c·ª• th·ªÉ
        if (configData.containsKey("deposit_rate")) {
            content.append("‚Ä¢ T·ª∑ l·ªá ti·ªÅn c·ªçc: ").append(configData.get("deposit_rate")).append("%\n");
        }
        if (configData.containsKey("transaction_fee")) {
            content.append("‚Ä¢ Ph√≠ giao d·ªãch: ").append(configData.get("transaction_fee")).append(" VNƒê\n");
        }
        if (configData.containsKey("service_fee")) {
            content.append("‚Ä¢ Ph√≠ d·ªãch v·ª•: ").append(configData.get("service_fee")).append("%\n");
        }
        if (configData.containsKey("refund_time")) {
            content.append("‚Ä¢ Th·ªùi gian ho√†n ti·ªÅn: ").append(configData.get("refund_time")).append(" ng√†y\n");
        }
        if (configData.containsKey("cancel_before_24h")) {
            content.append("‚Ä¢ H·ªßy tr∆∞·ªõc 24h: ").append(configData.get("cancel_before_24h")).append("% ho√†n ti·ªÅn\n");
        }
        if (configData.containsKey("cancel_before_12h")) {
            content.append("‚Ä¢ H·ªßy tr∆∞·ªõc 12h: ").append(configData.get("cancel_before_12h")).append("% ho√†n ti·ªÅn\n");
        }
        if (configData.containsKey("cancel_under_12h")) {
            content.append("‚Ä¢ H·ªßy d∆∞·ªõi 12h: ").append(configData.get("cancel_under_12h")).append("% ho√†n ti·ªÅn\n");
        }
        
        content.append("\nNg∆∞·ªùi thay ƒë·ªïi: ").append(changedBy).append("\n");
        content.append("Th·ªùi gian: ").append(LocalDateTime.now()).append("\n");
        content.append("\nVui l√≤ng c·∫≠p nh·∫≠t th√¥ng tin m·ªõi nh·∫•t!");
        
        return content.toString();
    }
    
    /**
     * L·∫•y t·∫•t c·∫£ config hi·ªán t·∫°i
     */
    public Map<String, String> getAllConfigurations() {
        Map<String, String> configs = new HashMap<>();
        
        try {
            List<SystemConfigurations> allConfigs = systemConfigurationsRepository.findAllActive();
            
            for (SystemConfigurations config : allConfigs) {
                configs.put(config.getConfigKey(), config.getConfigValue());
            }
        } catch (Exception e) {
            System.err.println("Error getting all configurations: " + e.getMessage());
        }
        
        return configs;
    }
    
    /**
     * L·∫•y l·ªãch s·ª≠ thay ƒë·ªïi config
     */
    public List<ConfigurationHistory> getConfigurationHistory(String configKey) {
        return configurationHistoryRepository.findByConfigKeyOrderByCreatedAtDesc(configKey);
    }
}

